terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region = "us-west-2"
}

data "aws_iam_policy_document" "s3_backend_write" {
  policy_id = "s3-backend-write-chaos-testing"

  statement {
    effect    = "Deny"
    actions   = ["s3:*"]
    resources = ["arn:aws:s3:::chaos-testing"]

    principals {
      identifiers = ["*"]
      type        = "*"
    }

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}

resource "aws_s3_bucket" "terraform_state" {
  bucket        = "chaos-testing"
  acl           = "private"
  policy        = data.aws_iam_policy_document.s3_backend_write.json
  force_destroy = true

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }

  versioning {
    enabled    = true
    mfa_delete = false
  }

  lifecycle {
    ignore_changes = [
      tags
    ]
  }
}

resource "aws_s3_bucket_public_access_block" "terraform_state" {
  bucket = aws_s3_bucket.terraform_state.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_api_gateway_rest_api" "chaos_testing_example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "Chaos Testing Example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "Chaos Testing Example"

  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

resource "aws_api_gateway_deployment" "chaos_testing_example" {
  rest_api_id = aws_api_gateway_rest_api.chaos_testing_example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.chaos_testing_example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "chaos_testing_example" {
  deployment_id = aws_api_gateway_deployment.chaos_testing_example.id
  rest_api_id   = aws_api_gateway_rest_api.chaos_testing_example.id
  stage_name    = "dev"
}
